#!/bin/bash

# =============================================================================
# üöÄ SCRIPT DE AUTOMA√á√ÉO COMPLETA - Git Flow
# =============================================================================
# Este script automatiza todo o fluxo de desenvolvimento:
# - Conventional commits
# - Versionamento autom√°tico
# - Changelog autom√°tico
# - Preenchimento de template de PR
# - Push para reposit√≥rio
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√µes de output
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_step() { echo -e "${PURPLE}üöÄ $1${NC}"; }

# Verificar se estamos em um reposit√≥rio Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    log_error "Este diret√≥rio n√£o √© um reposit√≥rio Git!"
    exit 1
fi

log_step "Iniciando fluxo de automa√ß√£o Git..."

# =============================================================================
# 1. VERIFICAR ESTADO DO REPOSIT√ìRIO
# =============================================================================
log_info "Verificando estado do reposit√≥rio..."

if [[ -n $(git status --porcelain) ]]; then
    log_info "Arquivos modificados encontrados:"
    git status --short
else
    log_warning "Nenhum arquivo modificado encontrado!"
    read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Opera√ß√£o cancelada."
        exit 0
    fi
fi

# =============================================================================
# 2. SELE√á√ÉO DO TIPO DE COMMIT
# =============================================================================
log_step "Selecionando tipo de commit..."

echo -e "${CYAN}Selecione o tipo de commit:${NC}"
echo "1) üÜï feat      - Nova funcionalidade"
echo "2) üêõ fix       - Corre√ß√£o de bug"
echo "3) üìù docs      - Documenta√ß√£o"
echo "4) üíÑ style     - Formata√ß√£o/estilo"
echo "5) ‚ôªÔ∏è  refactor - Refatora√ß√£o"
echo "6) ‚ö° perf      - Performance"
echo "7) üß™ test      - Testes"
echo "8) üîß chore     - Tarefas de build/ferramentas"
echo "9) üîí security  - Seguran√ßa"
echo "10) üåê i18n     - Internacionaliza√ß√£o"

read -p "Digite o n√∫mero (1-10): " commit_type_num

case $commit_type_num in
    1) commit_type="feat" ;;
    2) commit_type="fix" ;;
    3) commit_type="docs" ;;
    4) commit_type="style" ;;
    5) commit_type="refactor" ;;
    6) commit_type="perf" ;;
    7) commit_type="test" ;;
    8) commit_type="chore" ;;
    9) commit_type="security" ;;
    10) commit_type="i18n" ;;
    *) log_error "Op√ß√£o inv√°lida!"; exit 1 ;;
esac

# =============================================================================
# 3. CAPTURAR INFORMA√á√ïES DO COMMIT
# =============================================================================
log_step "Coletando informa√ß√µes do commit..."

read -p "üìù Descri√ß√£o curta do commit: " commit_description
read -p "üéØ Escopo (opcional, ex: auth, ui, api): " commit_scope
read -p "üí• Breaking change? (y/N): " -n 1 -r breaking_change
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    breaking_change=true
    read -p "üìã Descri√ß√£o do breaking change: " breaking_description
else
    breaking_change=false
fi

read -p "üìã Descri√ß√£o detalhada (opcional): " commit_body
read -p "üîó Issue relacionada (opcional, ex: #123): " related_issue

# =============================================================================
# 4. CONSTRUIR MENSAGEM DE COMMIT
# =============================================================================
log_step "Construindo mensagem de commit..."

# T√≠tulo do commit
if [[ -n "$commit_scope" ]]; then
    commit_title="${commit_type}(${commit_scope}): ${commit_description}"
else
    commit_title="${commit_type}: ${commit_description}"
fi

# Breaking change no t√≠tulo
if [[ "$breaking_change" == true ]]; then
    commit_title="${commit_title}!"
fi

# Corpo do commit
commit_message="$commit_title"

if [[ -n "$commit_body" ]]; then
    commit_message="${commit_message}

${commit_body}"
fi

# Breaking change no corpo
if [[ "$breaking_change" == true && -n "$breaking_description" ]]; then
    commit_message="${commit_message}

BREAKING CHANGE: ${breaking_description}"
fi

# Issue relacionada
if [[ -n "$related_issue" ]]; then
    commit_message="${commit_message}

Closes ${related_issue}"
fi

log_info "Mensagem de commit constru√≠da:"
echo -e "${CYAN}${commit_message}${NC}"

# =============================================================================
# 5. DETERMINAR NOVO VERSIONAMENTO
# =============================================================================
log_step "Determinando versionamento..."

# Obter vers√£o atual do package.json
current_version=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
log_info "Vers√£o atual: $current_version"

# Determinar tipo de bump baseado no tipo de commit
case $commit_type in
    "feat")
        if [[ "$breaking_change" == true ]]; then
            version_bump="major"
        else
            version_bump="minor"
        fi
        ;;
    "fix"|"security"|"perf")
        if [[ "$breaking_change" == true ]]; then
            version_bump="major"
        else
            version_bump="patch"
        fi
        ;;
    *)
        if [[ "$breaking_change" == true ]]; then
            version_bump="major"
        else
            version_bump="patch"
        fi
        ;;
esac

log_info "Tipo de versionamento: $version_bump"

# Calcular nova vers√£o
IFS='.' read -ra VERSION_PARTS <<< "$current_version"
major=${VERSION_PARTS[0]}
minor=${VERSION_PARTS[1]}
patch=${VERSION_PARTS[2]}

case $version_bump in
    "major")
        major=$((major + 1))
        minor=0
        patch=0
        ;;
    "minor")
        minor=$((minor + 1))
        patch=0
        ;;
    "patch")
        patch=$((patch + 1))
        ;;
esac

new_version="${major}.${minor}.${patch}"
log_success "Nova vers√£o: $new_version"

# =============================================================================
# 6. CONFIRMA√á√ÉO ANTES DE PROSSEGUIR
# =============================================================================
echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${YELLOW}üìã RESUMO DAS OPERA√á√ïES${NC}"
echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "üè∑Ô∏è  Vers√£o: ${GREEN}${current_version} ‚Üí ${new_version}${NC}"
echo -e "üìù Commit: ${CYAN}${commit_title}${NC}"
echo -e "üîÑ Tipo: ${PURPLE}${version_bump}${NC}"
echo -e "üí• Breaking: ${RED}${breaking_change}${NC}"
echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

read -p "üöÄ Continuar com estas opera√ß√µes? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_info "Opera√ß√£o cancelada."
    exit 0
fi

# =============================================================================
# 7. EXECUTAR OPERA√á√ïES
# =============================================================================

# Adicionar arquivos
log_step "Adicionando arquivos..."
git add .
log_success "Arquivos adicionados"

# Commit
log_step "Realizando commit..."
git commit -m "$commit_message"
log_success "Commit realizado"

# Atualizar vers√£o no package.json
log_step "Atualizando vers√£o no package.json..."
npm version $new_version --no-git-tag-version
log_success "Vers√£o atualizada para $new_version"

# Gerar/Atualizar CHANGELOG
log_step "Atualizando CHANGELOG..."
./scripts/generate-changelog.sh "$new_version" "$commit_type" "$commit_description" "$breaking_change"
log_success "CHANGELOG atualizado"

# Commit da vers√£o e changelog
log_step "Commitando vers√£o e changelog..."
git add package.json CHANGELOG.md
git commit -m "chore: bump version to $new_version and update changelog"
log_success "Vers√£o e changelog commitados"

# Criar tag
log_step "Criando tag..."
git tag -a "v$new_version" -m "Release v$new_version"
log_success "Tag v$new_version criada"

# Push
log_step "Realizando push..."
current_branch=$(git branch --show-current)
git push origin $current_branch
git push origin "v$new_version"
log_success "Push realizado para branch $current_branch e tag v$new_version"

# Gerar dados para template de PR
log_step "Gerando dados para template de PR..."
./scripts/generate-pr-data.sh "$commit_type" "$commit_description" "$new_version" "$breaking_change"
log_success "Dados do PR gerados"

# =============================================================================
# 8. FINALIZA√á√ÉO
# =============================================================================
echo -e "${GREEN}üéâ FLUXO COMPLETO EXECUTADO COM SUCESSO! üéâ${NC}"
echo -e "${CYAN}üìã O que foi feito:${NC}"
echo -e "  ‚úÖ Commit conventional realizado"
echo -e "  ‚úÖ Vers√£o atualizada para ${GREEN}$new_version${NC}"
echo -e "  ‚úÖ CHANGELOG atualizado"
echo -e "  ‚úÖ Tag criada e enviada"
echo -e "  ‚úÖ Push realizado"
echo -e "  ‚úÖ Dados para PR preparados"
echo ""
echo -e "${YELLOW}üöÄ Pr√≥ximos passos:${NC}"
echo -e "  1. Acesse GitHub e crie o Pull Request"
echo -e "  2. O template ser√° preenchido automaticamente"
echo -e "  3. Revise e submeta o PR"
echo ""
echo -e "${BLUE}üîó Links √∫teis:${NC}"
echo -e "  üìä Changelog: ./CHANGELOG.md"
echo -e "  üì¶ Package: ./package.json (v$new_version)"
echo -e "  üè∑Ô∏è  Tag: v$new_version"
