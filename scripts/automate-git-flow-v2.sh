#!/bin/bash

# =============================================================================
# üöÄ SCRIPT DE AUTOMA√á√ÉO MULTIPLATAFORMA - Git Flow v2.0
# =============================================================================
# Este script automatiza todo o fluxo de desenvolvimento:
# - Detec√ß√£o autom√°tica de plataforma (Windows/Linux)
# - Cria√ß√£o autom√°tica de branch baseada no tipo de commit
# - Conventional commits
# - Versionamento autom√°tico
# - Changelog autom√°tico
# - Template de PR
# - Push para reposit√≥rio
# =============================================================================

set -e

# =============================================================================
# DETECTAR PLATAFORMA
# =============================================================================
detect_platform() {
    case "$(uname -s)" in
        MINGW*|CYGWIN*|MSYS*)
            PLATFORM="windows"
            ;;
        Linux*)
            PLATFORM="linux"
            ;;
        Darwin*)
            PLATFORM="macos"
            ;;
        *)
            PLATFORM="unknown"
            ;;
    esac
}

detect_platform

# Cores para output (compat√≠vel com Windows/Linux)
if [[ "$PLATFORM" == "windows" ]]; then
    # Windows CMD/PowerShell n√£o suporta cores ANSI por padr√£o
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    PURPLE=''
    CYAN=''
    NC=''
else
    # Linux/macOS suportam cores ANSI
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    NC='\033[0m'
fi

# Fun√ß√µes de output
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_step() { echo -e "${PURPLE}üöÄ $1${NC}"; }
log_platform() { echo -e "${CYAN}üñ•Ô∏è  Plataforma detectada: $PLATFORM${NC}"; }

# Verificar se estamos em um reposit√≥rio Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    log_error "Este diret√≥rio n√£o √© um reposit√≥rio Git!"
    exit 1
fi

log_platform
log_step "Iniciando fluxo de automa√ß√£o Git Flow v2.0..."

# =============================================================================
# 1. VERIFICAR ESTADO DO REPOSIT√ìRIO
# =============================================================================
log_info "Verificando estado do reposit√≥rio..."

# Verificar branch atual
current_branch=$(git branch --show-current)
log_info "Branch atual: $current_branch"

if [[ -n $(git status --porcelain) ]]; then
    log_info "Arquivos modificados encontrados:"
    git status --short
else
    log_warning "Nenhum arquivo modificado encontrado!"
    read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Opera√ß√£o cancelada."
        exit 0
    fi
fi

# =============================================================================
# 2. SELE√á√ÉO DO TIPO DE COMMIT
# =============================================================================
log_step "Selecionando tipo de commit..."

echo -e "${CYAN}Selecione o tipo de commit:${NC}"
echo "1) üÜï feat      - Nova funcionalidade"
echo "2) üêõ fix       - Corre√ß√£o de bug"
echo "3) üìù docs      - Documenta√ß√£o"
echo "4) üíÑ style     - Formata√ß√£o/estilo"
echo "5) ‚ôªÔ∏è  refactor - Refatora√ß√£o"
echo "6) ‚ö° perf      - Performance"
echo "7) üß™ test      - Testes"
echo "8) üîß chore     - Tarefas de build/ferramentas"
echo "9) üîí security  - Seguran√ßa"
echo "10) üåê i18n     - Internacionaliza√ß√£o"

read -p "Digite o n√∫mero (1-10): " commit_type_num

case $commit_type_num in
    1) commit_type="feat" ;;
    2) commit_type="fix" ;;
    3) commit_type="docs" ;;
    4) commit_type="style" ;;
    5) commit_type="refactor" ;;
    6) commit_type="perf" ;;
    7) commit_type="test" ;;
    8) commit_type="chore" ;;
    9) commit_type="security" ;;
    10) commit_type="i18n" ;;
    *) log_error "Op√ß√£o inv√°lida!"; exit 1 ;;
esac

# =============================================================================
# 3. CAPTURAR INFORMA√á√ïES DO COMMIT
# =============================================================================
log_step "Coletando informa√ß√µes do commit..."

read -p "üìù Descri√ß√£o curta do commit: " commit_description
read -p "üéØ Escopo (opcional, ex: auth, ui, api): " commit_scope
read -p "üí• Breaking change? (y/N): " -n 1 -r breaking_change_reply
echo

if [[ $breaking_change_reply =~ ^[Yy]$ ]]; then
    breaking_change=true
    read -p "üìã Descri√ß√£o do breaking change: " breaking_description
else
    breaking_change=false
fi

read -p "üìã Descri√ß√£o detalhada (opcional): " commit_body
read -p "üîó Issue relacionada (opcional, ex: #123): " related_issue

# =============================================================================
# 4. CRIA√á√ÉO AUTOM√ÅTICA DE BRANCH
# =============================================================================
log_step "Gerenciando branch de desenvolvimento..."

# Fun√ß√£o para gerar nome da branch
generate_branch_name() {
    local type=$1
    local scope=$2
    local description=$3
    
    # Sanitizar descri√ß√£o (remover espa√ßos, caracteres especiais)
    local clean_description=$(echo "$description" | tr ' ' '-' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
    
    if [[ -n "$scope" ]]; then
        echo "${type}/${scope}-${clean_description}"
    else
        echo "${type}/${clean_description}"
    fi
}

# Verificar se estamos na main/master
if [[ "$current_branch" == "main" || "$current_branch" == "master" ]]; then
    log_info "Voc√™ est√° na branch principal ($current_branch)"
    
    # Gerar nome da nova branch
    new_branch=$(generate_branch_name "$commit_type" "$commit_scope" "$commit_description")
    
    echo -e "${CYAN}Op√ß√µes de branch:${NC}"
    echo "1) üåø Criar nova branch: $new_branch"
    echo "2) üìù Especificar nome customizado"
    echo "3) üöÄ Continuar na branch atual ($current_branch)"
    
    read -p "Escolha uma op√ß√£o (1-3): " branch_option
    
    case $branch_option in
        1)
            log_info "Criando nova branch: $new_branch"
            git checkout -b "$new_branch"
            current_branch="$new_branch"
            ;;
        2)
            read -p "üåø Nome da nova branch: " custom_branch
            log_info "Criando nova branch: $custom_branch"
            git checkout -b "$custom_branch"
            current_branch="$custom_branch"
            ;;
        3)
            log_warning "Continuando na branch principal. Certifique-se de que isso √© intencional!"
            ;;
        *)
            log_error "Op√ß√£o inv√°lida!"
            exit 1
            ;;
    esac
else
    log_info "Continuando na branch atual: $current_branch"
fi

# =============================================================================
# 5. CONSTRUIR MENSAGEM DE COMMIT
# =============================================================================
log_step "Construindo mensagem de commit..."

# T√≠tulo do commit
if [[ -n "$commit_scope" ]]; then
    commit_title="${commit_type}(${commit_scope}): ${commit_description}"
else
    commit_title="${commit_type}: ${commit_description}"
fi

# Breaking change no t√≠tulo
if [[ "$breaking_change" == true ]]; then
    commit_title="${commit_title}!"
fi

# Corpo do commit
commit_message="$commit_title"

if [[ -n "$commit_body" ]]; then
    commit_message="${commit_message}

${commit_body}"
fi

# Breaking change no corpo
if [[ "$breaking_change" == true && -n "$breaking_description" ]]; then
    commit_message="${commit_message}

BREAKING CHANGE: ${breaking_description}"
fi

# Issue relacionada
if [[ -n "$related_issue" ]]; then
    commit_message="${commit_message}

Closes ${related_issue}"
fi

log_info "Mensagem de commit constru√≠da:"
echo -e "${CYAN}${commit_message}${NC}"

# =============================================================================
# 6. DETERMINAR NOVO VERSIONAMENTO
# =============================================================================
log_step "Determinando versionamento..."

# Fun√ß√£o para executar node (compat√≠vel Windows/Linux)
get_package_version() {
    if command -v node >/dev/null 2>&1; then
        node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0"
    else
        # Fallback usando grep/sed se node n√£o estiver dispon√≠vel
        grep '"version"' package.json 2>/dev/null | sed 's/.*"version": *"\([^"]*\)".*/\1/' || echo "0.0.0"
    fi
}

current_version=$(get_package_version)
log_info "Vers√£o atual: $current_version"

# Determinar tipo de bump
case $commit_type in
    "feat")
        if [[ "$breaking_change" == true ]]; then
            version_bump="major"
        else
            version_bump="minor"
        fi
        ;;
    "fix"|"security"|"perf")
        if [[ "$breaking_change" == true ]]; then
            version_bump="major"
        else
            version_bump="patch"
        fi
        ;;
    *)
        if [[ "$breaking_change" == true ]]; then
            version_bump="major"
        else
            version_bump="patch"
        fi
        ;;
esac

log_info "Tipo de versionamento: $version_bump"

# Calcular nova vers√£o
IFS='.' read -ra VERSION_PARTS <<< "$current_version"
major=${VERSION_PARTS[0]}
minor=${VERSION_PARTS[1]}
patch=${VERSION_PARTS[2]}

case $version_bump in
    "major")
        major=$((major + 1))
        minor=0
        patch=0
        ;;
    "minor")
        minor=$((minor + 1))
        patch=0
        ;;
    "patch")
        patch=$((patch + 1))
        ;;
esac

new_version="${major}.${minor}.${patch}"
log_info "Nova vers√£o: $new_version"

# =============================================================================
# 7. ATUALIZAR PACKAGE.JSON E FAZER COMMIT
# =============================================================================
log_step "Atualizando vers√£o e fazendo commit..."

# Fun√ß√£o para atualizar package.json (compat√≠vel Windows/Linux)
update_package_version() {
    if command -v node >/dev/null 2>&1; then
        # Usar node se dispon√≠vel
        node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$new_version';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
    else
        # Fallback usando sed (funciona em Linux/macOS/Windows com Git Bash)
        if [[ "$PLATFORM" == "windows" ]]; then
            sed -i 's/"version": *"[^"]*"/"version": "'$new_version'"/' package.json
        else
            sed -i 's/"version": *"[^"]*"/"version": "'$new_version'"/' package.json
        fi
    fi
}

# Atualizar vers√£o no package.json
if [[ -f "package.json" ]]; then
    update_package_version
    log_success "package.json atualizado para vers√£o $new_version"
fi

# Fazer commit
git add .
git commit -m "$commit_message"
log_success "Commit realizado com sucesso!"

# Criar tag de vers√£o
git tag -a "v$new_version" -m "Release version $new_version"
log_success "Tag v$new_version criada!"

# =============================================================================
# 8. GERAR CHANGELOG AUTOM√ÅTICO
# =============================================================================
log_step "Gerando changelog..."

# Fun√ß√£o para gerar changelog b√°sico
generate_changelog() {
    local version=$1
    local date=$(date '+%Y-%m-%d')
    local changelog_entry="## [$version] - $date

### $commit_type
- $commit_description"

    if [[ -n "$commit_body" ]]; then
        changelog_entry="$changelog_entry
  
  $commit_body"
    fi

    # Adicionar ao CHANGELOG.md se existir, sen√£o criar
    if [[ -f "CHANGELOG.md" ]]; then
        # Backup do changelog atual
        cp CHANGELOG.md CHANGELOG.md.bak
        
        # Adicionar nova entrada no topo
        echo -e "$changelog_entry\n" > CHANGELOG.md.tmp
        tail -n +1 CHANGELOG.md.bak >> CHANGELOG.md.tmp
        mv CHANGELOG.md.tmp CHANGELOG.md
        rm CHANGELOG.md.bak
    else
        echo -e "# Changelog\n\n$changelog_entry" > CHANGELOG.md
    fi
    
    log_success "Changelog atualizado!"
}

generate_changelog "$new_version"

# =============================================================================
# 9. FAZER PUSH E CRIAR PR TEMPLATE
# =============================================================================
log_step "Fazendo push e preparando PR..."

# Push da branch e tags
git push origin "$current_branch"
git push origin "v$new_version"

log_success "Push realizado para branch $current_branch e tag v$new_version"

# Gerar template de PR
generate_pr_template() {
    cat > PR_TEMPLATE.md << EOF
# üöÄ Pull Request: $commit_title

## üìã Descri√ß√£o
$commit_description

$(if [[ -n "$commit_body" ]]; then echo "$commit_body"; fi)

## üîÑ Tipo de Mudan√ßa
- [x] $commit_type: $(case $commit_type in
    "feat") echo "Nova funcionalidade" ;;
    "fix") echo "Corre√ß√£o de bug" ;;
    "docs") echo "Documenta√ß√£o" ;;
    "style") echo "Formata√ß√£o/estilo" ;;
    "refactor") echo "Refatora√ß√£o" ;;
    "perf") echo "Performance" ;;
    "test") echo "Testes" ;;
    "chore") echo "Tarefas de build/ferramentas" ;;
    "security") echo "Seguran√ßa" ;;
    "i18n") echo "Internacionaliza√ß√£o" ;;
esac)

## üìä Impacto
- **Vers√£o**: $current_version ‚Üí $new_version
- **Breaking Change**: $(if [[ "$breaking_change" == true ]]; then echo "‚ö†Ô∏è SIM"; else echo "‚úÖ N√ÉO"; fi)
$(if [[ "$breaking_change" == true && -n "$breaking_description" ]]; then echo "- **Breaking Change Details**: $breaking_description"; fi)

## üß™ Como Testar
1. Fazer checkout da branch \`$current_branch\`
2. Instalar depend√™ncias: \`npm install\` ou \`yarn install\`
3. Executar testes: \`npm test\` ou \`yarn test\`
4. Executar aplica√ß√£o: \`npm start\` ou \`yarn start\`

## ‚úÖ Checklist
- [x] C√≥digo testado localmente
- [x] Testes passando
- [x] Documenta√ß√£o atualizada (se necess√°rio)
- [x] Changelog atualizado
- [x] Vers√£o incrementada

$(if [[ -n "$related_issue" ]]; then echo "## üîó Issues Relacionadas
$related_issue"; fi)

## üñ•Ô∏è Plataforma de Desenvolvimento
- **OS**: $PLATFORM
- **Branch**: $current_branch
- **Commit**: $(git rev-parse --short HEAD)

---
*PR gerado automaticamente pelo Git Flow v2.0* ü§ñ
EOF

    log_success "Template de PR gerado: PR_TEMPLATE.md"
}

generate_pr_template

# =============================================================================
# 10. RESUMO FINAL
# =============================================================================
log_step "Resumo da Opera√ß√£o"

echo -e "${GREEN}‚úÖ Automa√ß√£o conclu√≠da com sucesso!${NC}"
echo
echo -e "${CYAN}üìä Resumo:${NC}"
echo "‚Ä¢ Plataforma: $PLATFORM"
echo "‚Ä¢ Branch: $current_branch"
echo "‚Ä¢ Commit: $commit_title"
echo "‚Ä¢ Vers√£o: $current_version ‚Üí $new_version"
echo "‚Ä¢ Tag: v$new_version"
echo "‚Ä¢ Breaking Change: $(if [[ "$breaking_change" == true ]]; then echo "SIM"; else echo "N√ÉO"; fi)"
echo
echo -e "${CYAN}üöÄ Pr√≥ximos passos:${NC}"
echo "1. Verificar o PR template gerado: PR_TEMPLATE.md"
echo "2. Criar Pull Request no GitHub/GitLab"
if [[ "$current_branch" != "main" && "$current_branch" != "master" ]]; then
    echo "3. Ap√≥s merge, deletar branch: git branch -d $current_branch"
fi
echo
echo -e "${GREEN}üéâ Happy coding!${NC}"
