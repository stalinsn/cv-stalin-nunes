#!/bin/bash

# =============================================================================
# üîÑ SCRIPT DE MIGRA√á√ÉO PARA VERS√ÉO MODULAR
# =============================================================================
# Facilita a transi√ß√£o do script monol√≠tico para a vers√£o modular
# =============================================================================

set -e

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîÑ Migrando para Git Flow Automation v3.0 (Modular)${NC}"
echo

# Verificar se estamos no diret√≥rio correto
if [[ ! -f "package.json" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Certifique-se de estar no diret√≥rio raiz do projeto${NC}"
    exit 1
fi

# Verificar se a pasta automation existe
if [[ ! -d "automation" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Pasta 'automation' n√£o encontrada!${NC}"
    echo "Execute este script no diret√≥rio onde a pasta automation foi criada."
    exit 1
fi

echo -e "${GREEN}‚úÖ Estrutura modular detectada!${NC}"
echo

# Verificar comandos do package.json
if grep -q "gitflow.*automation/git-flow.sh" package.json; then
    echo -e "${GREEN}‚úÖ package.json j√° atualizado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Atualizando package.json...${NC}"
    # Backup do package.json
    cp package.json package.json.backup
    
    # Atualizar script gitflow
    if grep -q '"gitflow"' package.json; then
        sed -i.tmp 's|"gitflow": "bash ./scripts/automate-git-flow-v2.sh"|"gitflow": "bash ./automation/git-flow.sh"|' package.json
        rm -f package.json.tmp
        echo -e "${GREEN}‚úÖ Script gitflow atualizado${NC}"
    fi
fi

echo

# Testar a nova estrutura
echo -e "${BLUE}üß™ Testando estrutura modular...${NC}"

# Verificar se todos os m√≥dulos existem
modules=(
    "automation/modules/platform.sh"
    "automation/modules/logger.sh"
    "automation/modules/git-utils.sh"
    "automation/modules/commit-builder.sh"
    "automation/modules/versioning.sh"
    "automation/modules/branch-manager.sh"
    "automation/modules/changelog.sh"
    "automation/modules/template-manager.sh"
    "automation/modules/pr-generator.sh"
)

all_modules_ok=true
for module in "${modules[@]}"; do
    if [[ -f "$module" ]]; then
        echo -e "${GREEN}‚úÖ $module${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $module - n√£o encontrado${NC}"
        all_modules_ok=false
    fi
done

if [[ "$all_modules_ok" == true ]]; then
    echo -e "${GREEN}‚úÖ Todos os m√≥dulos est√£o presentes!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Alguns m√≥dulos est√£o faltando${NC}"
    exit 1
fi

echo

# Verificar permiss√µes
if [[ -x "automation/git-flow.sh" ]]; then
    echo -e "${GREEN}‚úÖ Script principal execut√°vel${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Tornando script execut√°vel...${NC}"
    chmod +x automation/git-flow.sh
    echo -e "${GREEN}‚úÖ Permiss√µes corrigidas${NC}"
fi

echo

# Resumo da migra√ß√£o
echo -e "${BLUE}üìã Resumo da Migra√ß√£o:${NC}"
echo
echo -e "${GREEN}‚úÖ Estrutura Modular:${NC}"
echo "  ‚Ä¢ üìÅ automation/ - Pasta principal"
echo "  ‚Ä¢ üîß 9 m√≥dulos especializados"
echo "  ‚Ä¢ üìã 4 templates de PR personaliz√°veis"
echo "  ‚Ä¢ ‚öôÔ∏è  Configura√ß√µes personaliz√°veis"
echo "  ‚Ä¢ üìö Documenta√ß√£o completa"
echo
echo -e "${GREEN}‚úÖ Comandos Dispon√≠veis:${NC}"
echo "  ‚Ä¢ yarn gitflow     - Nova vers√£o modular"
echo "  ‚Ä¢ npm run gitflow  - Nova vers√£o modular (alternativa)"
echo "  ‚Ä¢ ./automation/git-flow.sh - Execu√ß√£o direta"
echo
echo -e "${GREEN}‚úÖ Exportabilidade:${NC}"
echo "  ‚Ä¢ Copie apenas a pasta 'automation/'"
echo "  ‚Ä¢ Use em qualquer projeto Git"
echo "  ‚Ä¢ Sem depend√™ncias externas obrigat√≥rias"
echo

# Teste r√°pido
echo -e "${BLUE}üöÄ Teste R√°pido:${NC}"
echo "Execute: yarn gitflow --help (em breve)"
echo "Ou:      ./automation/git-flow.sh"
echo

echo -e "${GREEN}üéâ Migra√ß√£o conclu√≠da com sucesso!${NC}"
echo -e "${BLUE}üí° A vers√£o modular est√° pronta para uso!${NC}"
